import React, { useEffect, useState,useContext } from "react";
import styled from "styled-components";
import { useNavigate } from "react-router-dom";
// import { useMyContext } from "../context/categoryContext.jsx";
import axios from "axios";

import { Header } from "../components/header";
import { NavbarComponent } from "../components/navbar";
import { Footer } from "../components/footer";
import checkUserLoginStatus from "../helper/loggedin";
import { getOrCreateDeviceId } from "../helper/device";
import AddressPage from "../pages/address.jsx"
const CheckoutPageContainer = styled.div`
  display: flex;
  flex-direction: column;
  gap: 30px;
  padding: 20px;
  font-family: 'Arial', sans-serif;
  background-color: #fffaf3;
`;

const OrderSummary = styled.div`
  padding: 20px;
  border: 1px solid #f4a261;
  border-radius: 8px;
  background-color: #fff8ed;
  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
`;

const PaymentOptions = styled.div`
  padding: 20px;
  border: 1px solid #f4a261;
  border-radius: 8px;
  background-color: #fff8ed;
  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
`;

const SummaryItem = styled.div`
  display: flex;
  justify-content: space-between;
  padding: 10px 0;
  border-bottom: 1px solid #eee;
  font-size: 16px;
  color: #6a4f4b;
`;

const Total = styled.div`
  font-weight: bold;
  font-size: 20px;
  color: #dc6f00;
  margin-top: 15px;
`;

const PaymentButton = styled.button`
  padding: 12px 24px;
  background-color: #dc6f00;
  color: #ffffff;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-size: 16px;
  font-weight: bold;

  &:hover {
    background-color: #bf5e00;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
  }
`;

const Heading = styled.h2`
  font-size: 24px;
  color: #dc6f00;
  border-bottom: 2px solid #f4a261;
  padding-bottom: 8px;
  margin-bottom: 16px;
`;

const Label = styled.label`
  display: block;
  margin: 10px 0;
  font-size: 16px;
  color: #6a4f4b;

  input {
    margin-right: 10px;
  }
`;

const CheckoutPage = () => {
  const [orderItems, setOrderItems] = useState([]);
  const [isProcessingPayment, setIsProcessingPayment] = useState(false);
  const [userId, setUserId] = useState(null);
  const [deviceId, setDeviceId] = useState(null);
  const navigate = useNavigate();
  // const { address } = useContext(useMyContext);
  const token=localStorage.getItem('authToken')
  useEffect(() => {
    const fetchOrderItems = async () => {
      try {
        const userId = checkUserLoginStatus(); // Ensure this function is defined and returns a user ID
        setUserId(userId);
        const deviceId = await getOrCreateDeviceId(); // Ensure this function returns a valid device ID
        setDeviceId(deviceId);
        const response = await axios.get(
          `${process.env.REACT_APP_BASE_URL_Buyer}/cart/${userId}/${deviceId}`
        );
        setOrderItems(response.data.data);
      } catch (error) {
        console.error("Error fetching order items:", error);
      }
    };

    fetchOrderItems();
  }, [userId, deviceId]);

  const handleRazorpayPayment = async () => {
    try {
      // Check if orderItems are present
      if (!orderItems || orderItems.length === 0) {
        alert("No items in the order. Please add items to your cart before proceeding.");
        return;
      }
  
      // Check if userId is present
      if (!userId) {
        alert("User information is missing. Please log in to proceed.");
        return;
      }
  
      // Check if deviceId is present
      if (!deviceId) {
        alert("Device information is missing. Please try refreshing the page or reloading the app.");
        return;
      }
  
      // Send order creation request to your backend
      const order = await fetch(`${process.env.REACT_APP_BASE_URL_Buyer}/create-order`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "authorization": `Bearer ${token}`,
        },
        body: JSON.stringify({ amount: totalAmount }), // Pass total amount in the body
      }).then((res) => res.json());
  
      if (!order || !order.id) {
        alert("Failed to create an order. Please try again.");
        return;
      }
  
  
      // Configure Razorpay payment options
      const options = {
        key: "rzp_test_ppnch0jTkkUkKU", // Your Razorpay key_id
        amount: order.amount,
        currency: order.currency,
        name: "Men's Wear Store",
        description: "Purchase Men's Wear",
        image: "https://your-logo-url.com", // Your logo URL
        order_id: order.id, // Order ID generated by the backend
        handler: async (response) => {
          try {
            // `response` contains the payment details after a successful payment
            const paymentVerification = await axios.post(
              `${process.env.REACT_APP_BASE_URL_Buyer}/verify-payment`,
              {
                order_id: order.id, // Extract order_id from response
                payment_id: response.razorpay_payment_id, // Extract payment_id from response
                signature: response.razorpay_signature, // Extract signature from response
              }
            );
  
            if (paymentVerification.data.success) {
  
              const confirmOrderData = {
                userId,
                deviceId,
                orderId: order._id, // Ensure order._id is valid
                price: order.amount, // Ensure order.amount is valid
                payment_origin_source: "razorpay",
                addOns: [],
                billing: {
                  // Example billing details, replace with actual values
                  name: "Customer Name",
                  phone: "9876543210",
                  email: "customer@example.com",
                  address: {
                    city: "City Name",
                    state: "State Name",
                    areaCode: "123456",
                  },
                },
                payment: {
                  razorpayPaymentId: response.razorpay_payment_id,
                  status: "PAID",
                },
                items: orderItems.map((item) => ({
                  item_id: item.item_id,
                  name: item.name,
                  count: item.count,
                  price: item.price,
                  size: item.size,
                  color: item.color,
                })),
                city: "City Name",
                state: "State Name",
                transactionId: response.razorpay_order_id,
                paymentStatus: "PAID",
              };
  
              // Confirm the order after payment verification
              const confirmOrder = await axios.post(
                `${process.env.REACT_APP_BASE_URL_Buyer}/confirm`,
                confirmOrderData
              );
  
              navigate("/order");
            } else {
              alert("Payment verification failed. Please try again.");
            }
          } catch (error) {
            console.error("Error verifying payment:", error);
            alert("An error occurred during payment verification. Please try again.");
          }
        },
        prefill: {
          name: "Customer Name",
          email: "customer@example.com",
          contact: "9876543210",
        },
        theme: {
          color: "#3399cc",
        },
      };
  
      // Open Razorpay checkout modal
      const razorpay = new window.Razorpay(options);
      razorpay.open();
    } catch (error) {
      console.error("Error initiating Razorpay payment:", error);
      alert("Failed to initiate payment. Please try again.");
    }
  };
  
  
  

  const totalAmount = orderItems.reduce(
    (total, item) => total + item.count * item.price,
    0
  );

  return (
    <>
      <Header />
      <NavbarComponent/>
      <CheckoutPageContainer>
        <AddressPage/>
        <OrderSummary>
          <Heading>Order Summary</Heading>
          {orderItems.length > 0 ? (
            orderItems.map((item, index) => (
              <SummaryItem key={index}>
                <span>
                  <img src={item.images} alt={item.name} width="50" height="50" />
                </span>
                <span>
                  {item.name} (x{item.count})
                </span>
                <span>{item.color}</span>
                <span>{item.size}</span>
                <span>₹{item.count * item.price}</span>
              </SummaryItem>
            ))
          ) : (
            <p>No items selected for purchase.</p>
          )}
          <Total>Total: ₹{totalAmount}</Total>
        </OrderSummary>

        <PaymentOptions>
          <Heading>Payment Options</Heading>
          <Label>
            <input type="radio" name="payment" value="cod" /> Cash on Delivery
          </Label>
          <Label>
            <input type="radio" name="payment" value="card" /> Credit/Debit Card
          </Label>
          <Label>
            <input type="radio" name="payment" value="upi" /> UPI
          </Label>
          <PaymentButton onClick={handleRazorpayPayment} disabled={isProcessingPayment}>
  {isProcessingPayment ? "Processing..." : "Proceed to Payyy"}
</PaymentButton>

        </PaymentOptions>
      </CheckoutPageContainer>
      <Footer />
    </>
  );
};

export default CheckoutPage;
